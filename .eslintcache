[{"C:\\Users\\prst\\Desktop\\Новая папка\\banner-editor\\src\\App.js":"1","C:\\Users\\prst\\Desktop\\Новая папка\\banner-editor\\src\\reportWebVitals.js":"2"},{"size":4502,"mtime":1607537193122,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":499162500000,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"idw9p5",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\prst\\Desktop\\Новая папка\\banner-editor\\src\\App.js",["11","12"],"import React, { Component } from 'react'\n\nimport './App.css'\nimport banner from './components/banner.png'\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      imgWidth: '184',\n      imgHeight: '244',\n      imgText: '',\n      imgDescription: '',\n      textColor: '',\n      textSize: '28',\n      imgSrc: banner,\n      link: ''\n    }\n\n    this.changeSize = this.changeSize.bind(this);\n    this.changeState = this.changeState.bind(this);\n    this.clearCanvas = this.clearCanvas.bind(this);\n    this.getImg = this.getImg.bind(this);\n    this.getHTML = this.getHTML.bind(this);\n  }\n\n  componentDidMount = () => {\n    let context = this.canvas.getContext('2d');\n    let image = new Image();\n    image.src = this.state.imgSrc;\n    image.onload = () => { context.drawImage(image, 0, 0, this.canvas.width, this.canvas.height) }\n  }\n\n  canvasFunc = () => {\n    let context = this.canvas.getContext('2d');\n    let image = new Image();\n    image.src = this.state.imgSrc;\n    image.onload = () => { context.drawImage(image, 0, 0, this.canvas.width, this.canvas.height); context.fillStyle = '' + this.state.textColor; context.font = \"\" + this.state.textSize + \"px\" + \" Arials\"; context.fillText(this.state.imgText.substring(0, 9), 20, 50) }\n  }\n\n  changeSize = (event) => {\n    this.setState(() => {\n      return { [event.target.name]: parseInt(event.target.value, 10) }\n    }, () => this.canvasFunc())\n  };\n\n  changeState = (event) => {\n    this.setState(() => {\n      return { [event.target.name]: event.target.value }\n    }, () => this.canvasFunc())\n    console.log(this.state.textColor)\n  };\n\n  clearCanvas = () => {\n    let context = this.canvas.getContext('2d');\n    this.setState(() => (context.clearRect(0, 0, this.canvas.width, this.canvas.height), () => this.canvasFunc()))\n    console.log(this.state.imgSrc)\n  }\n\n  getImg = () => {\n    let link = document.createElement('a');\n    link.download = 'filename.png';\n    link.href = this.canvas.toDataURL()\n    link.click();\n  }\n\n  getJson = (e) => {\n    this.textArea.select();\n    document.execCommand('copy');\n    e.target.focus();\n  }\n\n  getHTML = (e) => {\n    this.link = document.createElement('a');\n    this.link.download = 'filename.png';\n    this.link.href = this.canvas.toDataURL()\n    this.textArea1.value = \"<img src='\" + this.link.href + \"'>\"\n    this.textArea1.select();\n    document.execCommand('copy');\n    e.target.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"wrap\">\n        <div className=\"img\">\n          <canvas crossorigin=\"anonymous\" ref={canvas => this.canvas = canvas} width={this.state.imgWidth} height={this.state.imgHeight} />\n        </div>\n        <div className=\"inputs-buttons\">\n          <div className=\"inputs\">\n            <div className=\"line\">\n              <input className=\"input\" name=\"imgWidth\" type=\"number\" onChange={this.changeSize} placeholder=\"img width\" />\n              <input className=\"input\" name=\"imgHeight\" type=\"number\" onChange={this.changeSize} placeholder=\"img height\" />\n              <input className=\"input\" name=\"textSize\" type=\"number\" onChange={this.changeState} placeholder=\"text size\" />\n            </div>\n            <div className=\"line\">\n            <input className=\"input\" name=\"imgText\" type=\"text\" onChange={this.changeState} placeholder=\"img text\" />\n              <input className=\"input\" name=\"imgDescription\" type=\"text\" onChange={this.changeState} placeholder=\"img description\" />\n              <input className=\"colorpicker\" name=\"textColor\" type=\"color\" onChange={this.changeState} />\n            </div>\n            {/* <input className=\"input\" name=\"imgSrc\" type=\"text\" onChange={this.changeState} placeholder=\"img source\" /> Не получилось реализовать =) */}\n          </div>\n          <div className=\"buttons\">\n            <button onClick={this.clearCanvas} className=\"btn\">Clear canvas</button>\n            <button onClick={this.getImg} className=\"btn\">Download</button>\n            <button onClick={this.getJson} className=\"btn\">Copy state</button>\n            <button onClick={this.getHTML} className=\"btn\">Copy tag</button>\n          </div>\n        </div>\n        <div className=\"hidden\">\n          <textarea ref={(textarea) => this.textArea = textarea} className=\"test\" type=\"text\" value={JSON.stringify(this.state)} />\n          <textarea ref={(textarea) => this.textArea1 = textarea} className=\"test\" type=\"text\" value={this.link} />\n        </div>\n      </div>\n    )\n  }\n}","C:\\Users\\prst\\Desktop\\Новая папка\\banner-editor\\src\\reportWebVitals.js",[],{"ruleId":"13","severity":1,"message":"14","line":40,"column":193,"nodeType":"15","messageId":"16","endLine":40,"endColumn":194},{"ruleId":"17","severity":1,"message":"18","line":58,"column":88,"nodeType":"19","messageId":"20","endLine":58,"endColumn":89},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression"]